Separate Data from Logic: Right now, each attack is a combination of both data (like cooldown, range, damage) and logic (effect). It would be more in line with the data-driven philosophy to have the effect logic driven by the data itself.

One way to do this might be to create a base Attack class that contains all the shared logic (like finding enemies in range), and then have the data define how each attack varies. For example, axeSwing might define that it affects all enemies in range, while lightningStrike could specify that it chains to a certain number of additional enemies within a certain radius.

Consistent Interfaces: It would be beneficial to create a consistent interface for all attacks. For example, all attacks could have a perform function that takes the same arguments. This would allow you to simplify the code where you use these attacks, because you can rely on this consistent interface.

Avoiding Global Dependencies: Your attacks currently depend on global visual_effects and projectiles. Instead of requiring these at the top of the module, consider passing them as arguments to the effect functions. This makes your code easier to test and modify.

Generalizing Common Logic: A lot of the code within each effect function is duplicated, such as the calculation of distances and creation of visual effects. Consider creating helper functions for these, or integrating this functionality into the base Attack class mentioned above.
function Attack:execute(x, y, enemies, visual_effects, projectiles)
    -- common behavior here
    local enemiesInRange = self:getEnemiesInRange(x, y, enemies)

    self.effect(self, enemiesInRange, x, y, visual_effects, projectiles)
end

function Attack:getEnemiesInRange(x, y, enemies)
    local enemiesInRange = {}
    for _, enemy in ipairs(enemies.list) do
        local dx = enemy.x - x
        local dy = enemy.y - y
        local distance = math.sqrt(dx * dx + dy * dy)
        
        -- Only affect enemies within the attack range
        if distance <= self.range then
            table.insert(enemiesInRange, enemy)
        end
    end
    return enemiesInRange
end